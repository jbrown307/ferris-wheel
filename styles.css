/* The animation-name property is used to link a @keyframes rule to a CSS selector. The value of 
this property should match the name of the @keyframes rule */

/* The animation-duration property is used to set how long the animation should sequence to 
complete. The time should be specified in either seconds (s) or milliseconds (ms) */

/* The animation-iteration-count property sets how many times your animation should repeat. 
This can be set to a number, or to infinite to indefinitely repeat the animation */

/* The animation-timing-function property sets how the animation should progress over time. 
There are a few different values for this property */
.wheel {
    position: absolute;
    width: 55vw;
    height: 55vw;
    max-width: 500px;
    max-height: 500px;
    border: 2px solid black;
    border-radius: 50%;
    margin-left: 50px;
    animation-name: wheel;
    animation-duration: 10s;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
  }

  /* The transform-origin property is used to set the point around which a CSS transformation is 
  applied. For example, when performing a rotate (which you will do later in this project), 
  the transform-origin determines around which point the element is rotated */

  /* the .line selector a transform-origin property of 0% 0%. This will offset the origin point 
  by 0% from the left and 0% from the top, setting it to the top left corner of the element */
  .line {
    background-color: black;
    width: 50%;
    height: 2px;
    position: absolute;
    left: 50%;
    top: 50%;
    transform-origin: 0% 0%;
  }

  /* The :nth-child() CSS pseudo-class matches elements based on the indexes of the elements in 
  the child list of their parents. In other words, the :nth-child() selector selects child elements 
  according to their position among all the sibling elements within a parent element */

  /* The :nth-of-type() CSS pseudo-class matches elements based on their position among siblings of 
  the same type (tag name) */

  /* This selector is targeting the second line div  */
  .line:nth-of-type(2) {
    transform: rotate(60deg);
  }

  .line:nth-of-type(3) {
    transform: rotate(120deg); 
  }
  
  .line:nth-of-type(4) {
    transform: rotate(180deg); 
  }
  
  .line:nth-of-type(5) {
    transform: rotate(240deg); 
  }
  
  .line:nth-of-type(6) {
    transform: rotate(300deg); 
  }

  /* Short Hand:  animation property will set the animation-name, animation-duration, 
  animation-timing-function, and animation-iteration-count properties in that order */
  .cabin {
    background-color: red;
    width: 20%;
    height: 20%;
    position: absolute;
    border: 2px solid;
    transform-origin: 50% 0%;
    animation: cabins 10s ease-in-out infinite;
  }

  .cabin:nth-of-type(1) {
    right: -8.5%;
    top: 50%;
  }

  .cabin:nth-of-type(2) {
    right: 17%;
    top: 93.5%;
  }
  
  .cabin:nth-of-type(3) {
    right: 67%;
    top: 93.5%;
  }
  
  .cabin:nth-of-type(4) {
    left: -8.5%;
    top: 50%;
  }
  
  .cabin:nth-of-type(5) {
    left: 17%;
    top: 7%;
  }
  
  .cabin:nth-of-type(6) {
    right: 17%;
    top: 7%;
  }

  /* The @keyframes at-rule is used to define the flow of a CSS animation. Within the @keyframes 
  rule, you can create selectors for specific points in the animation sequence, such as 0% or 25%, 
  or use from and to to define the start and end of the sequence */

  /* @keyframes rules require a name to be assigned to them, which you use in other rules 
  to reference. */

  /* You now need to define how your animation should start. To do this, create a 0% rule within 
  your @keyframes wheel rule. The properties you set in this nested selector will apply at the 
  beginning of your animation. */

  /* You can use @keyframes rules to control more than just the transformation of an element */
  @keyframes wheel {
    0% {
        transform: rotate(0deg);
      }
    100% {
        transform: rotate(-360deg);
      }
    }

  @keyframes cabins {
    0% {
        transform: rotate(0deg);
      }
      25% {
        background-color: yellow;
      }
      50% {
        background-color: purple;
      }
      75% {
        background-color: yellow;
      }
      100% {
        transform: rotate(-360deg);
      }
}
